{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","index.js","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","Typography","gutterBottom","variant","component","Grid","spacing","justify","item","Card","xs","md","cx","card","infected","CardContent","color","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","map","positive","death","date","dateChecked","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","toLocaleDateString","borderColor","fill","Countries","handleCountryChange","setCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","setState","this","image","src","alt","CountryPicker","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a0c6c862.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1XjTk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__37bJm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__7Xc22\",\"card\":\"Cards_card__1vCRs\",\"infected\":\"Cards_infected__24UOQ\",\"recovered\":\"Cards_recovered__3BGx5\",\"deaths\":\"Cards_deaths__50pUa\",\"globe\":\"Cards_globe__db0xi\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({ data:{ confirmed, recovered, deaths, lastUpdate } }) => {\r\n    console.log(confirmed);\r\n    if(!confirmed) {\r\n        return 'Loading...';\r\n    }\r\n\r\n    return(\r\n        <div className={styles.container}>  \r\n                <Typography gutterBottom variant=\"h3\" component=\"h2\">Coronavirus stats across the globe!</Typography>\r\n            <Grid container spacing ={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className = {cx(styles.card, styles.infected)}>\r\n                    <CardContent>   \r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=',' /> \r\n                         </Typography>\r\n                        <Typography color=\"textSecondary\">{ new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent>  \r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className = {cx(styles.card, styles.recovered)}>\r\n                    <CardContent>   \r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=',' />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{ new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries of COVID-19</Typography>\r\n                    </CardContent>  \r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className = {cx(styles.card, styles.deaths)}>\r\n                    <CardContent>   \r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=',' />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{ new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths from COVID-19</Typography>\r\n                    </CardContent>  \r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )    \r\n}\r\n\r\nexport default Cards; ","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\n// export const fetchDailyData = async () => {\r\n//   try {\r\n//     const { data } = await axios.get(`${url}/daily`);\r\n\r\n//     return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n//   } catch (error) {\r\n//     return error;\r\n//   }\r\n// };\r\n\r\n// Instead of Global, it fetches the daily data for the US\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n      const { data } = await axios.get('https://api.covidtracking.com/v1/us/daily.json');\r\n  \r\n      return data.map(({ positive, recovered, death, dateChecked: date }) => ({ confirmed: positive, recovered, deaths: death, date }));\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data: { countries } } = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport { fetchDailyData } from '../../api';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchMyAPI = async () => {\r\n      const initialDailyData = await fetchDailyData();\r\n\r\n      setDailyData(initialDailyData);\r\n    };\r\n\r\n    fetchMyAPI();\r\n  }, []);\r\n\r\n  const barChart = (\r\n    confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  const lineChart = (\r\n    dailyData[0] ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\r\n          datasets: [{\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          }, {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n          },  {\r\n            data: dailyData.map((data) => data.recovered),\r\n            label: 'Recovered',\r\n            borderColor: 'green',\r\n            backgroundColor: 'rgba(0, 255, 0, 0.5)',\r\n            fill: true,\r\n          },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst Countries = ({ handleCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n        <option value=\"\">United States</option>\r\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Countries;","export default __webpack_public_path__ + \"static/media/image.0816f926.png\";","import React from 'react';\r\n\r\nimport { Cards, CountryPicker, Chart } from './components';\r\nimport { fetchData } from './api/';\r\nimport styles from './App.module.css';\r\n\r\nimport image from './images/image.png';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: {},\r\n    country: '',\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const data = await fetchData();\r\n\r\n    this.setState({ data });\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const data = await fetchData(country);\r\n\r\n    this.setState({ data, country: country });\r\n  }\r\n\r\n  render() {\r\n    const { data, country } = this.state;\r\n\r\n    return (\r\n      <div className={styles.container}>\r\n        <img className={styles.image} src={image} alt=\"COVID-19\" />\r\n        <Cards data={data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={data} country={country} /> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App'; \r\n\r\nReactDOM.render(<App />, document.getElementById('root')); ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3AffI\",\"image\":\"App_image__3Dfvt\"};"],"sourceRoot":""}